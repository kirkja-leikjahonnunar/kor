[gd_resource type="VisualShader" load_steps=19 format=2]

[ext_resource path="res://Content/Textures/radial_gradient.png" type="Texture" id=1]
[ext_resource path="res://Content/Textures/noise.tres" type="Texture" id=2]
[ext_resource path="res://Content/Textures/Logos/icon.png" type="Texture" id=3]

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=6]
function = 0

[sub_resource type="VisualShaderNodeFresnel" id=7]

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarConstant" id=9]
constant = 0.022

[sub_resource type="VisualShaderNodeScalarConstant" id=10]
constant = 0.3

[sub_resource type="VisualShaderNodeVectorOp" id=11]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeColorUniform" id=12]
output_port_for_preview = 0
uniform_name = "Emmission"

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "camera"

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "normal"

[sub_resource type="VisualShaderNodeVectorFunc" id=3]

[sub_resource type="VisualShaderNodeTransformVecMult" id=4]
default_input_values = [ 0, Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ), 1, Vector3( 0, 23, 0 ) ]

[sub_resource type="VisualShaderNodeTexture" id=13]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeTexture" id=14]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeTexture" id=15]
output_port_for_preview = 0
texture = ExtResource( 3 )

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_8;
uniform vec4 Emmission : hint_color;



void vertex() {
// Output:0

}

void fragment() {
// Input:13
	vec3 n_out13p0 = vec3(UV, 0.0);

// Texture:8
	vec4 tex_frg_8_read = texture(tex_frg_8, n_out13p0.xy);
	vec3 n_out8p0 = tex_frg_8_read.rgb;
	float n_out8p1 = tex_frg_8_read.a;

// Scalar:14
	float n_out14p0 = 0.022000;

// Scalar:15
	float n_out15p0 = 0.300000;

// ColorUniform:18
	vec3 n_out18p0 = Emmission.rgb;
	float n_out18p1 = Emmission.a;

// VectorOp:16
	vec3 n_in16p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out16p0 = n_in16p0 + n_out18p0;

// Output:0
	ALBEDO = n_out8p0;
	METALLIC = n_out14p0;
	ROUGHNESS = n_out15p0;
	EMISSION = n_out16p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -753.766, -301.765 )
nodes/fragment/0/position = Vector2( 560, 140 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -800, 200 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -960, 380 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -680, 380 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( -440, 200 )
nodes/fragment/6/node = SubResource( 13 )
nodes/fragment/6/position = Vector2( -320, 600 )
nodes/fragment/7/node = SubResource( 14 )
nodes/fragment/7/position = Vector2( -540, 600 )
nodes/fragment/8/node = SubResource( 15 )
nodes/fragment/8/position = Vector2( 200, -180 )
nodes/fragment/10/node = SubResource( 5 )
nodes/fragment/10/position = Vector2( -800, 80 )
nodes/fragment/11/node = SubResource( 6 )
nodes/fragment/11/position = Vector2( -620, 80 )
nodes/fragment/12/node = SubResource( 7 )
nodes/fragment/12/position = Vector2( -60, 80 )
nodes/fragment/13/node = SubResource( 8 )
nodes/fragment/13/position = Vector2( 0, -60 )
nodes/fragment/14/node = SubResource( 9 )
nodes/fragment/14/position = Vector2( 220, 180 )
nodes/fragment/15/node = SubResource( 10 )
nodes/fragment/15/position = Vector2( 220, 260 )
nodes/fragment/16/node = SubResource( 11 )
nodes/fragment/16/position = Vector2( 240, 340 )
nodes/fragment/18/node = SubResource( 12 )
nodes/fragment/18/position = Vector2( -40, 660 )
nodes/fragment/connections = PoolIntArray( 2, 0, 5, 0, 10, 0, 11, 0, 4, 0, 5, 1, 5, 0, 12, 0, 13, 0, 8, 0, 14, 0, 0, 2, 3, 0, 4, 0, 15, 0, 0, 3, 8, 0, 0, 0, 16, 0, 0, 5, 18, 0, 16, 1 )
