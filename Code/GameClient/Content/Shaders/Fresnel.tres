[gd_resource type="VisualShader" load_steps=26 format=2]

[ext_resource path="res://Content/Textures/radial_gradient.png" type="Texture" id=1]
[ext_resource path="res://Content/Textures/noise.tres" type="Texture" id=2]
[ext_resource path="res://Content/Textures/Logos/icon.png" type="Texture" id=3]

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=6]
function = 0

[sub_resource type="VisualShaderNodeFresnel" id=7]

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarConstant" id=9]
constant = 0.022

[sub_resource type="VisualShaderNodeScalarConstant" id=10]
constant = 0.3

[sub_resource type="VisualShaderNodeVectorOp" id=11]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeColorUniform" id=12]
output_port_for_preview = 0
uniform_name = "Emmission"

[sub_resource type="VisualShaderNodeVectorOp" id=16]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=17]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=18]
output_port_for_preview = 0
uniform_name = "FresnelColor"

[sub_resource type="VisualShaderNodeScalarOp" id=19]
operator = 5

[sub_resource type="VisualShaderNodeScalarUniform" id=20]
uniform_name = "FresnelExponent"

[sub_resource type="VisualShaderNodeInput" id=21]
input_name = "normal"

[sub_resource type="VisualShaderNodeDotProduct" id=22]

[sub_resource type="VisualShaderNodeInput" id=23]
input_name = "view"

[sub_resource type="VisualShaderNodeVectorFunc" id=24]

[sub_resource type="VisualShaderNodeScalarOp" id=25]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 1.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=26]
output_port_for_preview = 0
function = 18

[sub_resource type="VisualShaderNodeTexture" id=13]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeTexture" id=14]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeTexture" id=15]
output_port_for_preview = 0
texture = ExtResource( 3 )

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_8;
uniform float FresnelExponent;
uniform vec4 FresnelColor : hint_color;
uniform vec4 Emmission : hint_color;



void vertex() {
// Output:0

}

void fragment() {
// Input:13
	vec3 n_out13p0 = vec3(UV, 0.0);

// Texture:8
	vec4 tex_frg_8_read = texture(tex_frg_8, n_out13p0.xy);
	vec3 n_out8p0 = tex_frg_8_read.rgb;
	float n_out8p1 = tex_frg_8_read.a;

// Scalar:14
	float n_out14p0 = 0.022000;

// Scalar:15
	float n_out15p0 = 0.300000;

// Input:24
	vec3 n_out24p0 = NORMAL;

// Input:26
	vec3 n_out26p0 = VIEW;

// VectorFunc:27
	vec3 n_out27p0 = normalize(n_out26p0);

// DotProduct:25
	float n_out25p0 = dot(n_out24p0, n_out27p0);

// ScalarOp:28
	float n_in28p0 = 1.00000;
	float n_out28p0 = n_in28p0 - n_out25p0;

// ScalarFunc:29
	float n_out29p0 = min(max(n_out28p0, 0.0), 1.0);

// ScalarUniform:23
	float n_out23p0 = FresnelExponent;

// ScalarOp:22
	float n_out22p0 = pow(n_out29p0, n_out23p0);

// ColorUniform:21
	vec3 n_out21p0 = FresnelColor.rgb;
	float n_out21p1 = FresnelColor.a;

// VectorOp:20
	vec3 n_in20p1 = vec3(2.00000, 2.00000, 2.00000);
	vec3 n_out20p0 = n_out21p0 * n_in20p1;

// VectorOp:19
	vec3 n_out19p0 = vec3(n_out22p0) * n_out20p0;

// ColorUniform:18
	vec3 n_out18p0 = Emmission.rgb;
	float n_out18p1 = Emmission.a;

// VectorOp:16
	vec3 n_out16p0 = n_out19p0 + n_out18p0;

// Output:0
	ALBEDO = n_out8p0;
	METALLIC = n_out14p0;
	ROUGHNESS = n_out15p0;
	EMISSION = n_out16p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1143.77, 221.235 )
nodes/fragment/0/position = Vector2( 560, 140 )
nodes/fragment/6/node = SubResource( 13 )
nodes/fragment/6/position = Vector2( -680, 880 )
nodes/fragment/7/node = SubResource( 14 )
nodes/fragment/7/position = Vector2( -900, 880 )
nodes/fragment/8/node = SubResource( 15 )
nodes/fragment/8/position = Vector2( 200, -180 )
nodes/fragment/10/node = SubResource( 5 )
nodes/fragment/10/position = Vector2( -820, 600 )
nodes/fragment/11/node = SubResource( 6 )
nodes/fragment/11/position = Vector2( -660, 600 )
nodes/fragment/12/node = SubResource( 7 )
nodes/fragment/12/position = Vector2( -220, -280 )
nodes/fragment/13/node = SubResource( 8 )
nodes/fragment/13/position = Vector2( 0, -60 )
nodes/fragment/14/node = SubResource( 9 )
nodes/fragment/14/position = Vector2( 220, 180 )
nodes/fragment/15/node = SubResource( 10 )
nodes/fragment/15/position = Vector2( 220, 260 )
nodes/fragment/16/node = SubResource( 11 )
nodes/fragment/16/position = Vector2( 300, 560 )
nodes/fragment/18/node = SubResource( 12 )
nodes/fragment/18/position = Vector2( 40, 660 )
nodes/fragment/19/node = SubResource( 16 )
nodes/fragment/19/position = Vector2( 40, 420 )
nodes/fragment/20/node = SubResource( 17 )
nodes/fragment/20/position = Vector2( -220, 580 )
nodes/fragment/21/node = SubResource( 18 )
nodes/fragment/21/position = Vector2( -420, 580 )
nodes/fragment/22/node = SubResource( 19 )
nodes/fragment/22/position = Vector2( -220, 380 )
nodes/fragment/23/node = SubResource( 20 )
nodes/fragment/23/position = Vector2( -660, 540 )
nodes/fragment/24/node = SubResource( 21 )
nodes/fragment/24/position = Vector2( -1040, 300 )
nodes/fragment/25/node = SubResource( 22 )
nodes/fragment/25/position = Vector2( -840, 320 )
nodes/fragment/26/node = SubResource( 23 )
nodes/fragment/26/position = Vector2( -1200, 360 )
nodes/fragment/27/node = SubResource( 24 )
nodes/fragment/27/position = Vector2( -1040, 360 )
nodes/fragment/28/node = SubResource( 25 )
nodes/fragment/28/position = Vector2( -660, 300 )
nodes/fragment/29/node = SubResource( 26 )
nodes/fragment/29/position = Vector2( -480, 320 )
nodes/fragment/connections = PoolIntArray( 10, 0, 11, 0, 13, 0, 8, 0, 14, 0, 0, 2, 15, 0, 0, 3, 8, 0, 0, 0, 16, 0, 0, 5, 18, 0, 16, 1, 19, 0, 16, 0, 21, 0, 20, 0, 20, 0, 19, 1, 22, 0, 19, 0, 26, 0, 27, 0, 24, 0, 25, 0, 27, 0, 25, 1, 25, 0, 28, 1, 28, 0, 29, 0, 29, 0, 22, 0, 23, 0, 22, 1 )
